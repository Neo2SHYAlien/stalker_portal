{% extends 'layout.twig' %}
{% set active = 'tv-channels' %}
{% set title = ('IPTV channels'|trans ~ ': ' ~ 'Organize channels'|trans) | trans %}

{% block content %}
    <div id="iptv_list_move">
        <div class="row">
            <div class="col-xs-6 col-sm-6 col-md-6 col-lg-6 pull-left " >
                <div class="col-xs-8 col-sm-8 no-padding input-group channel_diapason">
                    <label class="control-label col-xs-2 col-sm-2 no-modified">{{ 'Channels'|trans }}</label>
                    <div class="col-xs-5 col-sm-5 no-margin-right no-padding-right leftbordercircle">
                        <input class="form-control" placeholder="{{ 'from'|trans }}" type="text" id="channel_begin" name="channel_begin" value="10000">
                    </div>
                    <div class="col-xs-5 col-sm-5 no-margin-left no-padding-left rightbordercircle">
                        <input class="form-control" placeholder="{{ 'to'|trans }}" type="text" id="channel_end" name="channel_end" value="10020">
                    </div>
                </div>
                <div class="col-xs-2 col-sm-2 no-modified no-margin no-padding-left">
                    <button class="btn btn-success green" type="button" id="iptv_list_move_show">{{ 'Get channels'|trans }}</button>
                </div>
            </div>
            <div class="col-xs-6 col-sm-6">
                <button class="btn btn-success pull-right " type="button" id="iptv_list_move_send">{{ 'Apply'|trans }}</button>
                <div class="input-group col-xs-8 col-sm-8 col-md-8 col-lg-8 pull-right no-padding"  id="searc_and_backlight">
                    <span class="input-group-addon"><i class="fa fa-search"></i></span>
                    <input type="text" placeholder="{{ 'Enter title of the number of the channel'|trans }}..." class="form-control" data-original-title="" title="">
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
                <div class="col-xs-12 col-sm-12 box_v2" id="channelListContainer"></div>
            </div>
        </div>
    </div>
    <script type="text/javascript" src="./plugins/scrollTo/jquery.scrollTo.min.js" defer=""></script>
    <script type="text/javascript" src="./js/jquery.tmpl.min.js" defer=""></script>
    <script type="text/javascript">
        var channelList = [];

        function yelp() {
            $(document).ready(function () {

                $(document).on('click', "a.main_ajax", function (e) {
                    e.stopPropagation();
                    e.preventDefault();
                    $("#modalbox").data('complete', 0);
                    var sendData = $(this).data();
                    ajaxPostSend($(this).attr('href'), sendData, false, false);
                    return false;
                });

                $(document).on('click', '#iptv_list_move_send', function(e){
                    e.stopPropagation();
                    e.preventDefault();
                    var dataForSend = checkChanges(true);
                    showModalBox();
                    ajaxPostSend('{{ app['controller_alias'] }}/move-apply', {data: dataForSend});
                    $("#modalbox").data('complete', 1);
                    return false;
                });
                $(document).on('keyup', "#searc_and_backlight input[type='text']", function(e){
                    if (typeof(e) != 'undefined' && typeof(e.type) != 'undefined' && e.type=='keyup' && e.keyCode == 13) {
                        setBackLightFocus();
                        return true;
                    }
                    $("#channelListContainer .box").removeClass('shining');
                    var search = $(this).val();
                    if ($.trim(search) != ''){
                        $.each(['\\', '[',']','<','>','=','+','*','?','|','(',')','$','.','&', '{', '}'], function(i, val){
                            search = search.replace(val, "\\" + val);
                        });
                        
                        $("#channelListContainer .box").each(function(){
                            var searchRegExp = new RegExp(search, "gi");
                            if (searchRegExp.test($(this).find('.curr_num').text()) || searchRegExp.test($(this).find('.channel').text())) {
                                $(this).find('.channel').addClass('backlight');
                            } else {
                                $(this).find('.channel').removeClass('backlight');
                            }
                        })
                    } else {
                        $("#channelListContainer .backlight").removeClass('backlight');
                    }
                });
                
                $(document).on('click', "#searc_and_backlight button", function(e){
                    e.stopPropagation();
                    e.preventDefault();
                    setBackLightFocus();
                    return false;
                });

                $('#channelListContainer').on('click', 'a.lock-link', function (e) {
                    e.preventDefault();
                    e.stopPropagation();
                    var childI = $(this).children('i');
                    var offset = channelList[channelList.length - 1].old_number - channelList.length;
                    var childID = parseInt($(this).closest('.box').find('span.curr_num').data('number'), 10) - 1 - offset;
                    if (childI.hasClass('fa-lock')) {
                        childI.removeClass('fa-lock').addClass('fa-unlock');
                        $(this).closest("div.box").removeClass('sortable-disabled').addClass('sortable-enabled');
                        channelList[childID].locked = false;
                    } else {
                        childI.removeClass('fa-unlock').addClass('fa-lock');
                        $(this).closest("div.box").addClass('sortable-disabled').removeClass('sortable-enabled');
                        channelList[childID].locked = true;
                    }
                    ajaxPostSend('{{ app['controller_alias'] }}/toogle-lock-channel', {data:{1: {id: childI.data('id'), locked: channelList[childID].locked, number: channelList[childID].number} } });
                    initListItemsPosition($(this).closest('.droptrue'));
                    $("#modalbox").data('complete', 1);
                    return false;
                });

                $('#channelListContainer').on('click', 'a.remove-link', function (e) {
                    e.preventDefault();
                    e.stopPropagation();
                    var parentList = $(this).closest('.droptrue');
                    var thisElem = $(this).closest('div.box');

                    var offset = channelList[channelList.length - 1].old_number - channelList.length;
                    var childID = parseInt($(this).closest('.box').find('span.curr_num').data('number'), 10) - 1 - offset;

                    $(thisElem.detach()).appendTo('#channelListContainer div.ui-sortable:last');



                    /*$(this).closest('div.box').remove();
                    channelList.splice(childID, 1);*/

                    /*ajaxPostSend('{{ app['controller_alias'] }}/channel-move-up', {number: channelList[childID].number});*/
                    /*initListItemsPosition($(this).closest('.droptrue'));*/
                    sortAndMove($('#channelListContainer div.ui-sortable:last'), 1);
                    var sendData = {channel_begin: channelList[childID].number + 1, channel_end: channelList[childID].number + 1, oneitem: true};

                    thisElem.remove();
                    channelList.splice(childID, 1);
                    for( var i = childID; i < channelList.length; i++){
                        channelList[i].number--;
                        $('#channelListContainer span.curr_num[data-number="' + channelList[i].old_number + '"]').data('number', channelList[i].old_number - 1);
                        channelList[i].old_number--;
                    }

                    $('#channelListContainer div.ui-sortable:not(last)').sortable('refresh');

                    ajaxPostSend('{{ app.request.baseUrl ~ '/' ~ app.controller_alias  ~ '/' }}move-channel-list-json', sendData, false, false, true);
                    /*parentList.sortable('refresh');*/
                    /*$("#modalbox").data('complete', 1);*/
                    return false;
                });

                $(document).on('click', '#iptv_list_move_show', function(e){
                    showModalBox();
                    $('#channelListContainer').empty().delay(1000).promise().done(function(){
                        var sendData = {channel_begin: $.trim($("#channel_begin").val()), channel_end: $.trim($("#channel_end").val())};
                        if ((sendData.channel_end - sendData.channel_begin) > 200 ) {
                            customConfirm(sendData);
                        } else {
                            ajaxPostSend('{{ app.request.baseUrl ~ '/' ~ app.controller_alias  ~ '/' }}move-channel-list-json', sendData, false, false, true);
                        }
                    });
                });

                $( document ).on('show', "div.droptrue",function(e){
                    $(this).sortable({
                        connectWith: "div.droptrue",
                        cancel: ".sortable-disabled",
                        items: '.sortable-enabled',
                        create: function(){
                            initListItemsPosition(this);
                        },
                        stop: function( event, ui ) {
                            var sourceList = $(event.target),
                                destList = $(ui.item).closest('.ui-sortable'),
                                sourceNum = sourceList.data('blocknum'),
                                destNum = destList.data('blocknum'),
                                forward = sourceNum <= destNum ? 1 : -1;

                            sortAndMove(destList, forward);
                        }
                    });
                    $(this).disableSelection();
                });

            });
        }

        document.addEventListener( "DOMContentLoaded", yelp, false );

        function setBackLightFocus(){
            var first = $("#channelListContainer .box .backlight").get(0);
            if (!$(first).closest('.box').hasClass('shining')) {
                $(first).closest('.box').addClass('shining')
                $('#channelListContainer').scrollTo($(first).closest('.box'), 'slow');
                return;
            }
            $("#channelListContainer .box .backlight").each(function(index){
                var parent = $(this).closest('.box');
                if (index == 0 || parent.hasClass('shining')) {
                    return true;
                } else if (index == $("#channelListContainer .box .backlight").length - 1){
                    $("#channelListContainer .box").removeClass('shining');
                    $('#channelListContainer').scrollTo(parent, 'slow');
                    return false;
                }

                $('#channelListContainer').scrollTo(parent, 'slow');
                parent.addClass('shining');
                return false;
            });
        }

        function channelListRender(container){

            var _container = $(container);
            _container.empty();
            var maxBlockHeight = $(window).height()- _container.offset().top - 50;
            _container.height(maxBlockHeight);
            maxBlockHeight -= $(document).height() - $(window).height();
            _container.height(maxBlockHeight +10);
            var maxBlockWidth = $(window).width()- _container.offset().left - 50;
            _container.width(maxBlockWidth+10);
            var maxItemOnBlock = Math.floor(maxBlockHeight/50);
            var currentCount = 0;
            for (var i= 0; i< channelList.length; ) {
                var currentBlock = $("<div/>", {'class': 'no-padding'}).appendTo(_container);
                currentBlock.hide();
                var currentItemsBlock = $("<div/>", {'class': 'no-padding droptrue'}).appendTo(currentBlock);
                currentItemsBlock.hide();
                for ( var j = currentCount; j < (currentCount + maxItemOnBlock) && j < channelList.length; j++) {
                    if (typeof(channelList[j]) == 'undefined') {
                        continue;
                    }
                    var item = channelList[j];
                    item['notempty'] = item['empty'] ? '0': '1';
                    item['empty'] = item['empty'] ? 'empty' : '';
                    item['notlocked'] = item['locked'] ? '0': '1';
                    item['locked'] = item['locked'] ? 'sortable-disabled' : 'sortable-enabled';
                    $("#list_item").tmpl(item).appendTo(currentItemsBlock);
                    i++;
                }
                currentBlock.prepend('<div class=" counter"><span>' + (channelList[currentCount].number) + '-'+ (channelList[j - 1].number) + '</span></div>');
                currentCount = j;
                currentBlock.css('top', 0);
                currentBlock.css('left', (Math.ceil(currentCount/maxItemOnBlock) - 1)*250);
                currentBlock.show();
                currentItemsBlock.data('blocknum', channelList[currentCount - 1].number);
                currentItemsBlock.show();
                if (j >= channelList.length) {
                    break;
                }
            }
        }

        function sortAndMove(source, direction, items){
            var totalLength = $(source).data('itemscount'),
                fixedPos = JSON.parse($(source).data('fixedPos') || '{}'),
                addItems = items || [], lItem, newNum, currNum;
            if (Object.keys(fixedPos).length) {
                $('.sortable-disabled', source).detach().each(function(){
                    index = $(this).data('pos');
                    if (typeof (fixedPos[index]) != 'undefined') {
                        fixedPos[index] = $(this);
                    }
                });
            }
            var other = [];
            if (direction > 0 ) {
                other = $('div.box', source).detach().toArray().concat(addItems);
            } else {
                other = addItems.concat($('div.box', source).detach().toArray());
            }

            var offset = channelList[channelList.length - 1].old_number - channelList.length;

            for(var i = (direction > 0 ? totalLength - 1 : 0 ); (direction > 0 ? i >= 0: i < totalLength); i-=direction){
                if (typeof (fixedPos[i]) != 'undefined' || (i == (direction > 0 ? 0 : totalLength - 1) && Object.keys(fixedPos).length == 1 )) {
                    $(fixedPos[i])[direction > 0 ? 'prependTo': 'appendTo'](source);
                    delete(fixedPos[i]);
                } else {
                    lItem = other[direction > 0 ? 'pop': 'shift']();
                    currNum = parseInt($('span[data-number]', lItem).data('number'), 10) - 1 - offset;
                    newNum = parseInt($(source).data('blocknum'), 10) - totalLength + i - offset;

                    channelList[currNum]['number'] = newNum + 1 + offset;
                    $('span[data-number]', lItem).text(channelList[currNum]['number']);

                    $(lItem)[direction > 0 ? 'prependTo': 'appendTo'](source);
                }
            }
            if (other.length != 0) {
                source = source.parent('div')[[direction < 0 ? 'next': 'prev']]('div').children('.ui-sortable');
                sortAndMove(source, direction, other);
            }
            $(source).sortable( "refresh" );

        }

        function channelDataPrepare(data){
            if (data && data.data) {
                for (var i in data.data) {
                    data.data[i].link = data.data[i].id ? '{{ app.request.baseUrl ~ '/' ~ app.controller_alias  ~ '/' }}edit-channel?id=' + data.data[i].id: '';
                    data.data[i].old_number = data.data[i].number;
                }
                channelList = data.data;
            }
            channelListRender('#channelListContainer');
        }

        function initListItemsPosition(sourceList){
            var fixedPos = {};
            $(sourceList).children('div.box:not(.ui-sortable-placeholder)').each(function(i){
                var $this = $(this);
                if ($this.hasClass('sortable-disabled')) {
                    $this.data('pos', i);
                    fixedPos[i] = 0;
                }
            });
            $(sourceList).data('itemscount', $('div.box:not(.ui-sortable-placeholder)', sourceList).length);
            $(sourceList).data('fixedPos', JSON.stringify(fixedPos));
        }

        function showModalBox(){
            notty('<span>{{ 'Request is being processed'|trans }}...</span>','notification');
        }
        
        var manageChannel = function (obj) {
            notty('<span>{{ 'Done'|trans }}!</span>','success');
        };
        
        var manageChannelError = function(data){
            if (typeof(data.nothing_to_do) == 'undefined' || !data.nothing_to_do) {
                notty('<span>{{ 'Error'|trans }}! ' + (data.error ? data.error : '') + '</span>', 'error');
            }
        };
        
        var checkChanges = function(getData){
            var dataForSend = new Array(),
                getData = getData || false;

            $.each(channelList, function(){
                if (this.number != this.old_number && !this.empty) {
                    dataForSend.push({'id': this.id, 'number': this.number, 'old_number': this.old_number});
                    if (getData) {
                        this.old_number = this.number;
                    }
                }
            });

            return getData? dataForSend : dataForSend.length > 0;
        };

        function customConfirm(sendData){
            $("#modalbox .modal-header-name").html("{{ 'Warning'|trans }}");
            $("#modalbox .devoops-modal-inner").html("\n\
            <div class='col-md-12'>\n\
                <span class='col-md-12 txt-default'>\n\
                    {{ 'Attention! Processing list of more than 200 elements can greatly affect the performance and usability of this section of the admin panel. Are you sure you want to continue?'|trans }}\n\
                </span>\n\
            </div>");
            if ($("#modalbox .devoops-modal-bottom button").length == 0) {
                $("#modalbox .devoops-modal-bottom").append($("#modal_form_buttons").html());
            }

            $("#modalbox .devoops-modal-bottom").on('click', "button[type='button']", function(e){
                ajaxPostSend('{{ app.request.baseUrl ~ '/' ~ app.controller_alias  ~ '/' }}move-channel-list-json', sendData, false, false, true);
                JScloseModalBox();
            });

            $("#modalbox").show();
        }

        function appendToEnd(data) {
            var addItem  = data.data[0];
            addItem.link = addItem.id ? '{{ app.request.baseUrl ~ '/' ~ app.controller_alias  ~ '/' }}edit-channel?id=' + addItem.id: '';
            addItem.number --;
            addItem.old_number = addItem.number;
            channelList[addItem.number] = addItem;

            addItem['notempty'] = addItem['empty'] ? '0': '1';
            addItem['empty'] = addItem['empty'] ? 'empty' : '';
            addItem['notlocked'] = addItem['locked'] ? '0': '1';
            addItem['locked'] = addItem['locked'] ? 'sortable-disabled' : 'sortable-enabled';

            $("#list_item").tmpl(addItem).appendTo($('#channelListContainer div.ui-sortable:last'));

            $('#channelListContainer div.ui-sortable:not(last)').sortable('refresh');
        }

        window.onunload = function(){
            if (checkChanges()) {
                return "{{ 'You have unsaved data. Really want to go?'|trans }}";
            }
        }; 
            
        window.onbeforeunload = function(){
            if (checkChanges()) {
                return "{{ 'You have unsaved data. Really want to go?'|trans }}";
            }
        };
        
    </script>
    {% autoescape false %}
    <script type="text/template" id="list_item">
        <div class="box ${locked}"  style="position:relative; z-index:30;">
            <div class="box-header ${empty}"  style="position:relative; z-index:30;">
                <div class="box-name col-sm-11"  style="position:relative; z-index:30;">
                    <span class="curr_num col-xs-2 col-sm-2 no-modified no-padding" data-number="${old_number}">${number}</span>
                    <div class="channel col-xs-10 col-sm-10 no-padding">
                            <span class="no-padding">
                              <!----  <img class="img-rounded" src="${logo}" alt="">--->
                            </span>
                        <a href="${link}" class="no-padding name-link">${name}</a>
                        {{ "{{if notempty == '1'}}" }}
                            <a class="lock-link">
                                <i data-id="${id}" class="fa fa-{{ "{{if notlocked == '1'}}" }}un{{ '{{/if}}' }}lock"></i>
                            </a>
                        {{ '{{else}}' }}
                            <a class="remove-link">
                                <i class="fa fa-minus"></i>
                            </a>
                        {{ '{{/if}}' }}
                    </div>
                </div>
                <div class="no-move"></div>
            </div>
        </div>
    </script>
    <script type="text/template" id="modal_form_buttons">
        <div class="pull-left no-padding">&nbsp;</div>
        <div class="pull-right no-padding">
            <button type="reset" class="btn btn-default pull-left">{{ 'Cancel'|trans }}</button>
            <button type="button" class="btn btn-success pull-right">{{ 'Get channels'|trans }}</button>
        </div>
    </script>
    {% endautoescape %}
{% endblock %}